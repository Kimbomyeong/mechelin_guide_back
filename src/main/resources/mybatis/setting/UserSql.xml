<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="user">
	<!-- insert -->
	<insert id="insertOfUser" parameterType="udto">
		INSERT user
		<if test="profile_url != null">
			(email, password, nickname, profile_url, created_at, updated_at)
			VALUES ( #{email}, #{password}, #{nickname}, #{profile_url}, now(), now() )
		</if>
		<if test="profile_url == null">
			(email, password, nickname, created_at, updated_at)
			VALUES ( #{email}, #{password}, #{nickname}, now(), now() )
		</if>
	</insert>
	
	<!-- email available check-->
	<select id="mailCheckOfUser" parameterType="String" resultType="int">
		SELECT count(*) FROM user
			WHERE email = #{email} AND dropuser = false
	</select>
	<!-- nickname available check -->
	<select id="nickCheckOfUser" parameterType="String" resultType="int">
		SELECT count(*) FROM user
			WHERE nickname = #{nickname} AND dropuser = false
	</select>
	
	<!-- hmmm... lookup mailvalid TB -->
	<!-- <select id="didSendMailValid" parameterType="String" resultMap="Map">
		SELECT count(*) count, DATE_FORMAT(created_at, '%Y%m%d') created
			FROM mailvalid WHERE email = #{email}
	</select> -->
	<select id="didSendMailValid" parameterType="String" resultType="int">
		SELECT count(*) FROM mailvalid WHERE email = #{email}
	</select>
	
	<!-- email validation request -->
	<update id="againSendMailValid" parameterType="String">
		UPDATE mailvalid SET created_at = now() WHERE email = #{email}
	</update>
	<insert id="holdInfoForMailValid" parameterType="String">
		INSERT mailvalid(email, created_at) VALUES( #{email}, now() )
	</insert>
	
	<!-- grant validation -->
	<update id="joinGrantedOfMailValid" parameterType="String">
		UPDATE mailvalid SET validity = true WHERE email = #{email}
	</update>
	<!-- granted or not ? -->
	<select id="isUserDidMailValid" parameterType="String" resultType="boolean">
		SELECT validity FROM mailvalid WHERE email = #{email}
	</select>
	
	<!-- delete mailvalid TB when insert user TB-->
	<delete id="deleteMailValidWhenJoined" parameterType="String">
		DELETE FROM mailvalid WHERE email = #{email}
	</delete>
	
	
	
	<!-- ID/PW valid check -->
	<select id="matchDataOfUser" parameterType="HashMap" resultType="int">
		SELECT count(*) FROM user
			WHERE email = #{email} AND password = #{password}
	</select>
	<!-- get PW of ID for valid check -->
	<select id="getPassOfUser" parameterType="udto" resultType="String">
		SELECT password FROM user 
			WHERE
			<if test="email != null">
				email = #{email}
			</if>
			<if test="email == null">
				id = #{id}
			</if>
	</select>
	
	<!-- change password -->
	<update id="updatePassOfUser" parameterType="HashMap">
		UPDATE user SET password = #{password} 
			WHERE
			<if test="email != null">
				email = #{email}
			</if>
			<if test="email == null">
				id = #{id}
			</if>
	</update>
	
	
	<!-- check if kakao user already exists -->
	<select id="checkOfApiUser" parameterType="String" resultType="int">
		SELECT count(*) FROM kuser WHERE email = #{email}
	</select>
	
	<!-- kakao TB insert -->
	<insert id="insertOfApiUser" parameterType="udto">
		INSERT kuser (kakaoid, email, created_at, updated_at)
			VALUES ( #{id}, #{email}, now(), now() )
	</insert>
	<!-- update user profile -->
	<update id="updateProfileOfApiUser" parameterType="udto">
		UPDATE user SET profile_url = #{profile_url} WHERE email = #{email}
	</update>
	<!-- delete kakao user -->
	<delete id="deleteOfApiUser" parameterType="String">
		DELETE FROM kuser WHERE email = #{email}
	</delete>
	
	<!-- 이메일로 유저의 id 반환 -->
	<select id="selectIdOfUser" resultType="int" parameterType="String">
		SELECT id FROM user WHERE email = #{email}
	</select>
	
	<!-- id로 user dto 반환 -->
	<select id="profileOfUser" parameterType="String" resultType="udto">
		SELECT * FROM user WHERE id = #{id}
	</select>
	<!-- user테이블의 프로필 사진 이미지 변경 -->
	<update id="updateProfileImgOfUser" parameterType="HashMap">
		UPDATE user SET profile_url = #{profile_url} WHERE id = #{id}
	</update>
	<!-- 핀 사진 이미지 주소 변경 -->
	<update id="updateMarkerImgOfUser" parameterType="HashMap">
		UPDATE user SET pin_url = #{pin_url} WHERE id = #{id}
	</update>
	
	
	<!-- 소개글 변경 -->
	<update id="updateIntroduceOfUser" parameterType="udto">
		UPDATE user SET introduce = #{introduce} WHERE id = #{id}
	</update>
	<!-- 닉네임 변경 -->
	<update id="updateNicknameOfUser" parameterType="udto">
		UPDATE user SET nickname = #{nickname} WHERE id = #{id}
	</update>
	
	<!-- 회원 탈퇴 -->
	<update id="deleteAccountOfUser" parameterType="String">
		UPDATE user SET dropuser = true WHERE id = #{id}
	</update>
	
	
	<!-- 네이버 회원가입 -->
	<insert id="insertOfnaveruser" parameterType="HashMap">
		INSERT INTO nuser (naverid, email, nickname, user_id, created_at, updated_at) 
		VALUES (#{naverid}, #{email}, #{nickname}, #{user_id}, now(), now())
	</insert>
	<!-- 네이버 유저 테이블에 등록이 되어있는지 -->
	<select id="selectIsExistNaverUser" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM nuser WHERE naverid = #{naverid}
	</select>
	<!-- 네이버 이메일로 user_id 얻기 -->
	<select id="selectUserIdOfNaver" parameterType="String" resultType="int">
		SELECT user_id FROM nuser WHERE email = #{email}
	</select>
	<!-- 우리 DB에 email인 유저가 등록되어있는지 -->
	<!-- id 반환하는것으로 수정하려고 했으나 혹시 오류가 발생할 수 있어서 새로만듦 -->
	<select id="SelctCountEmailUser" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM user WHERE email = #{email}
	</select>

	<!-- 구글 회원가입 -->
	<insert id="insertOfGoogleUser" parameterType="HashMap">
		INSERT INTO guser (googleId, email, nickname, user_id, created_at, updated_at) 
		VALUES (#{googleId}, #{email}, #{nickname}, #{user_id}, now(), now())
	</insert>
	<!-- 구글 유저 테이블에 등록이 되어있는지 -->
	<select id="existGoogleUser" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM guser WHERE googleId = #{googleId}
	</select>
	<!-- 구글 이메일로 user_id 얻기 -->
	<select id="selectUserIdOfGoogle" parameterType="String" resultType="int">
		SELECT user_id FROM guser WHERE email = #{email}
	</select>

</mapper>